---
import Layout from "../layouts/Layout.astro";

import { CostellationComponent } from "../angular/components/costellation.component";
import { StarComponent } from "../angular/components/star.component";

const repos: any[] = await fetch("https://api.github.com/users/frabaddo/repos")
  .then((response) => response.json())
  .then((data) => {
    if (data.message) {
      throw new Error(data.message);
    }
    return data;
  })
  .catch((error) => {
    console.error("Error fetching repositories:", error);
    return [{
		id: 1,
	  name: "Test 1",
	  description: "Failed to load repositories.",
	  html_url: ""
	},
	{
	  id: 2,
	  name: "Test 2",
	  description: "Failed to load repositories.",
	  html_url: ""
	},
	{
	  id: 3,
	  name: "Test 3",
	  description: "Failed to load repositories.",
	  html_url: ""
	},
	{
	  id: 4,
	  name: "Test 4",
	  description: "Failed to load repositories.",
	  html_url: ""
	},
	{
	  id: 5,
	  name: "Test 5",
	  description: "Failed to load repositories.",
	  html_url: ""
	},
	{
	  id: 6,
	  name: "Test 6",
	  description: "Failed to load repositories.",
	  html_url: ""
	},
	{
	  id: 7,
	  name: "Test 7",
	  description: "Failed to load repositories.",
	  html_url: ""
	},
	{
	  id: 8,
	  name: "Test 8",
	  description: "Failed to load repositories.",
	  html_url: ""
	}
];
  });
---

<Layout>
  <CostellationComponent {...{ planets: repos }} server:defer />
  <StarComponent {...{ type: 0 }} server:defer />
  <StarComponent {...{ type: 1 }} server:defer />
  <StarComponent {...{ type: 2 }} server:defer />
  <StarComponent {...{ type: 3 }} server:defer />

  <div class="repos-container">
    {
      repos.map((repo) => (
		<div class="box">
			<div class="content">
			<h2>{repo.name}</h2>
			<p>{repo.description} </p>
			<a href={repo.html_url} target="_blank">
            View on GitHub
          </a>
			</div>
		</div>
      ))
    }
  </div>
</Layout>

<style>
	body, html{
		background: linear-gradient(to right,#000,#111);
	}
	.repos-container {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
		gap: 4rem;
		padding: 2rem 2rem 5rem 2rem;
	}

	.box
{
	position: relative;
	display: flex;
	flex-direction: column;
}

.box .content
{
	position: relative;
    padding: 1rem 2rem;
    background: rgba(255, 255, 255, 0.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    z-index: 2;
    color: #fff;
    max-width: 100%;
    display: flex;
    overflow: hidden;
	flex: 1;
    gap: 2rem;
    flex-direction: column;
}

.box::after {
    content: "";
    position: absolute;
    inset: 0;
    backdrop-filter: blur(1px);
    z-index: 1;
}


.box h2
{
  font-size: 2em;
  white-space: pre-line;
  word-break: break-word;
  color: #fff;
  margin: 0;
}

.box p
{
  font-size: 1.1em;
  margin: 0;
  line-height: 1.4em;
}

.box a
{
  display: inline-block;
  font-size: 1.1em;
  color: #111;
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(10px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  padding: 10px;
  border-radius: 0.5rem;
  text-decoration: none;
  font-weight: 700;
  margin-top: auto;
  margin-bottom: 1rem;
}

.box a:hover
{
  background: #ffcf4d;
  box-shadow: 0 1px 15px rgba(1, 1, 1, 0.2);
}

</style>
